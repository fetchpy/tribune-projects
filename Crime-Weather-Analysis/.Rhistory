theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank())+
scale_fill_grey()
library(ggplot2)
Plot.results <-ggplot(data = roboData, aes(x = Uncanny, y =Empathy, fill=Robot))+
coord_cartesian(ylim = c(1,12))+ #specifying the y-axis scale
geom_bar(stat='identity', position=position_dodge(width=1))+
xlab("Platform Type")+ylab("Comprehension Score")+ #labelling the x-axis and y-axis
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank())+
scale_fill_grey()
Plot.results #displaying the graph
Plot.results <-ggplot(data = roboData, aes(x = Uncanny, y =Empathy, fill=Robot))+
coord_cartesian(ylim = c(1,12))+ #specifying the y-axis scale
geom_bar(stat='identity')+
xlab("Platform Type")+ylab("Comprehension Score")+ #labelling the x-axis and y-axis
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank())+
scale_fill_grey()
Plot.results #displaying the graph
Plot.results <-ggplot(data = roboData, aes(x = Uncanny, y =Empathy, fill=Robot))+
coord_cartesian(ylim = c(1,12))+ #specifying the y-axis scale
geom_bar(stat='identity', position=position_dodge(width=.5))+
xlab("Platform Type")+ylab("Comprehension Score")+ #labelling the x-axis and y-axis
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank())+
scale_fill_grey()
Plot.results #displaying the graph
Plot.results <-ggplot(data = roboData, aes(x = Uncanny, y =Empathy, fill=Robot))+
coord_cartesian(ylim = c(1,12))+ #specifying the y-axis scale
geom_bar(stat='identity', position=position_dodge(width=1))+
xlab("Platform Type")+ylab("Comprehension Score")+ #labelling the x-axis and y-axis
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank())+
scale_fill_grey()
Plot.results #displaying the graph
install.packages(plotly)
install.packages('plotly')
library (plotly)
summary(Model.aov.1)
summary(Model.aov.1)$Df
summary(Model.aov.1)$Sum
x <-summary(Model.aov.1)
x$`Error: Subject`
x$`Error: Within`
m<-x$`Error: Within`
m$Uncannt
m$Uncanny
x$`Error: Subject`$Df
rsm1<-x$`Error: Within`
summary(Model.aov.1)[[1]]
summary(Model.aov.1)[[2]]
summary(Model.aov.1)[[2]][["Pr(>F)"]]
summary(Model.aov.1)[[2]][["Df"]]
summary(Model.aov.1)[[2]]["Df"]
summary(Model.aov.1)[[2]]
sum_test = unlist(summary(Model.aov.1))
names(sum_test)
sum_test["Within.Df2"]
sum_test[["Within.Df2"]]
sum_test["Pr(>F)1"]
Model.aov.1[[2]]$'Pr(>F)'
Model.aov.1[[2]]$'Subject.Df'
Model.aov.1[[2]]$coefficients
Model.aov.1$`(Intercept)`
Model.aov.1$Within
Model.aov.1$Within$coefficients
Model.aov.1$Within$coefficients[1]
Model.aov.1$Within$coefficients[1][1]
Model.aov.1$Within$coefficients[1]
Model.aov.1$Within$coefficients[1][0]
value(Model.aov.1$Within$coefficients[1])
tt<- Model.aov.1$Within$coefficients[1]
tt
Model.aov.1$Subject$p.values #add $ to see the other things you can fetch
Model.aov.1$Subject$effects
Model.aov.1$Within$effects
Model.aov.1$Within$residuals
Model.aov.1
summary(Model.aov.1)
rff<-summary(Model.aov.1)
rff$`Error: Within`
rff2<-rff$`Error: Within`
rff2$residulas
rff2[0]
rff2[1
]
rff2[1][1]
rff2[1][2]
rff2[1][[1]]
rff2[1]['Df']
rff2[1][['Df']]
Model.aov.1
summary(Model.aov.1)
summary(Model.aov.1)$With in
summary(Model.aov.1)$Within
qms<-summary(Model.aov.1)
qms$`Error: Within`
effects(qms)
library(effects)
effects(qms)
effect(qms)
summary(Model.aov.1$Within)
rrr<-summary(Model.aov.1$Within)
summary(Model.aov.1)[[1]]["Residuals", "Sum Sq"]
summary(Model.aov.1)[[1]]["Residuals"]
summary(Model.aov.1)[[1]]["Error: Within.Sum Sq2"]
summary(Model.aov.1)[[1]]
summary(Model.aov.1)[[2]]
summary(Model.aov.1)[[2]]["Error: Within.Sum Sq2"]
summary(Model.aov.1)[[2]]
summary(Model.aov.1)[[2]]["Uncanny"]
summary(Model.aov.1)[[2]][["Uncanny"]]
summary(Model.aov.1)[[2]][["Error: Subject.Mean Sq"]]
anova(Model.aov.1)
library(plyr)
library(lsmeans)
Model.aov.1$Subject$effects #add $ to see the other things you can fetch
Model.aov.1$Within$coefficients
summary(Model.aov.1)
Model.aov.1
Model.aov.1$Within$df.residual
library(afex)
Model.aov.1<-aov_car(Empathy ~ Uncanny*Robot + Error(Subject), data=roboData)
summary(Model.aov.1)
Model.aov.1<-aov_car(Empathy ~ Uncanny*Robot + Error(Subject), data=roboData,anova_table = list(es = "pes"))
summary(Model.aov.1)
Model.aov.1<-aov_car(Empathy ~ Uncanny*Robot + Error(Subject), data=roboData,anova_table = list(es = "pes", return="univariate"))
summary(Model.aov.1)
Model.aov.1<-aov_car(Empathy ~ Uncanny*Robot + Error(Subject), data=roboData,anova_table = list(es = "pes"), return="univariate")
summary(Model.aov.1)
Model.aov.1$`Sum Sq`
Model.aov.1
viz <-data.frame(
SS = SS,
Label = SS_label
)
SS<-Model.aov.1$`Sum Sq`
SS_label <-c('Intercept','Uncanny','Robot','Uncanny*Robot','Residual')
viz <-data.frame(
SS = SS,
Label = SS_label
)
head(viz)
p <- plot_ly(viz, labels = Label, values =SS, type = 'pie') %>%
layout(title = 'United States Personal Expenditures by Categories in 1960',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
p <- plot_ly(viz, labels = ~Label, values =SS, type = 'pie') %>%
layout(title = 'United States Personal Expenditures by Categories in 1960',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
p
SS<-Model.aov.1$`Sum Sq`[1:]
SS<-Model.aov.1$`Sum Sq`[1,:]
list(SS)
SS[1]
SS[1:]
SS[1:len(SS)]
SS(1:len(SS))
SS[[1:len(SS)]]
SS[[1:length(SS)]]
SS[1:length(SS)]
SS[2:]
SS[1:length(SS)]
SS[2:length(SS)]
SS<-Model.aov.1$`Sum Sq`
SS<-SS[2:length()]
SS<-SS[2:length(SS)]
SS
SS_label <-c('Uncanny','Robot','Uncanny*Robot','Residual')
viz <-data.frame(
SS = SS,
Label = SS_label
)
p <- plot_ly(viz, labels = ~Label, values =SS, type = 'pie') %>%
layout(title = 'United States Personal Expenditures by Categories in 1960',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
p
summary(Model.aov.1, type="II") #Type II Sum of Squares
piePlot <- plot_ly(viz, labels = ~Label, values =SS, type = 'pie') %>%
layout(title = 'Variance Explained/Unexplained',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
chart_link = plotly_POST(piePlot, filename="pie/basic")
chart_link
piePlot <- plot_ly(viz, labels = ~Label, values =SS, type = 'pie') %>%
layout(title = 'Variance Explained/Unexplained',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
piePlot
version
install.packages("truncnorm")
install.packages("truncnorm")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(truncnorm) #limits the result between 1 and 7
library(ggplot2)
library (plotly)
library(plyr)
library(lsmeans)
library(afex)
library(psych)
N.1 = 5 #Sample size per cell
SD.c1 = 1 #standard deviation
SD.c2 = 1 #standard deviation
SD.c3 = 1 #standard deviation
SD.c4 = 1 #standard deviation
SD.c5 = 1 #standard deviation
SD.c6 = 1 #standard deviation
Mean.c1 = 3 #mechanical- low
Mean.c2 = 2 #mechanical -medium
Mean.c3 = 2 #mechanical -high
Mean.c4 = 6 #humanoid- low
Mean.c5 = 3 #humanoid -medium
Mean.c6 = 2 #humanoid -high
roboData<- data.frame(
Subject = rep(seq(1,N.1),3),
Uncanny = c(rep("Low", N.1), rep("Medium", N.1), rep("High", N.1)),
Robot = c(rep("Mechanical",N.1*3), rep("Humanoid", N.1*3)),
Empathy =  c(rtruncnorm(N.1,1,7,1,.5), rtruncnorm(N.1,1,7,1,.5), #check the order so it corrsponds to the condition
rtruncnorm(N.1,1,7,1,.5), rtruncnorm(N.1,1,7,6,.5),
rtruncnorm(N.1,1,7,1,.5),rtruncnorm(N.1,1,7,1,.5)))
head(roboData, n=5)
str(roboData)
describe(roboData)
tapply(roboData$Empathy,
list(roboData$Uncanny,roboData$Robot), mean)
tapply(roboData$Empathy,
list(roboData$Robot), mean)
Model.aov.1<-aov_car(Empathy ~ Uncanny*Robot + Error(Subject/Uncanny*Robot), data=roboData,
return = "univariate")
Model.aov.1
Plot.results <-ggplot(data = roboData, aes(x = Uncanny, y =Empathy, fill=Robot))+
#coord_cartesian(ylim = c(1,7))+ #specifying the y-axis scale
scale_y_continuous(breaks = seq(1,7,1))+
facet_grid(.~Robot)+
geom_bar(stat='identity', position=position_dodge(width=1))+
xlab("Platform Type")+ylab("Comprehension Score")+ #labelling the x-axis and y-axis
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank())+
scale_fill_brewer(palette="Dark2")
Plot.results #displaying the graph
ss_uncanny <-Model.aov.1$aov$`Subject:Uncanny`$effects
ss_uncanny
SS<-Model.aov.1$univariate.tests[c(seq(2,4))] #Sum_of_Squares
SS
Model.aov.1
summary(Model.aov.1)
Model.aov.1$univariate.tests
range(3)
arange(3)
for i in c(seq(1,10)):
for (i in c(seq(1,10))):
for (i in c(seq(1,10))){}
for (i in c(seq(1,10))){
print (i)}
for (i in c(seq(1,10))){
[for i in c(seq(1,10)){print (i)}]
Model.aov.1$univariate.tests
Model.aov.1$univariate.tests[[c(1,2,3,4)]]
Model.aov.1$univariate.tests[c(1,2,3,4)]
Model.aov.1$univariate.tests[c(5,6,7,8)]
length(Model.aov.1$univariate.tests)
list(Model.aov.1)
Model.aov.1$univariate.tests[]
list(Model.aov.1$univariate.tests[])
Model.aov.1$univariate.tests[[10]]
Model.aov.1$univariate.tests[10]
Model.aov.1$univariate.tests[20]
Model.aov.1$univariate.tests[[20]]
type(Model.aov.1)
ERR<-Model.aov.1$univariate.tests[c(10,11,12),3]
ERR<-Model.aov.1$univariate.tests[c(10,11,12)]
EER
ERR
Model.aov.1$univariate.tests
f <-c(SS,ERR)
f
SS_label <-c('Uncanny - Explained','Robot - Explained','Uncanny*Robot - Explained','Residual - Unexplained',
'Uncanny_Error','Robot_Error','Uncanny*Robot_Error')
viz <-data.frame(
SS = SS,
Label = SS_label
)
anovaVis <- c(SS,ER)
anovaVis <- c(SS,ERR)
SS_label <-c('Uncanny - Explained','Robot - Explained','Uncanny*Robot - Explained','Residual - Unexplained',
'Uncanny_Error','Robot_Error','Uncanny*Robot_Error')
viz <-data.frame(
SS = SS,
ERR= ERR
Label = SS_label
)
SS_label <-c('Uncanny - Explained','Robot - Explained','Uncanny*Robot - Explained','Residual - Unexplained',
'Uncanny_Error','Robot_Error','Uncanny*Robot_Error')
viz <-data.frame(
SS = anovaVis,
Label = SS_label
)
SS
Model.aov.1$univariate.tests
SS_label <-c('Uncanny - Explained','Robot - Explained','Uncanny*Robot - Explained', #missing 'Residual - Unexplained'
'Uncanny_Error','Robot_Error','Uncanny*Robot_Error')
viz <-data.frame(
SS = anovaVis,
Label = SS_label
)
piePlot <- plot_ly(viz, labels = ~Label, values =SS, type = 'pie') %>%
layout(title = 'Variance Explained/Unexplained',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
piePlot
length(SS)
SS<-Model.aov.1$univariate.tests[c(seq(2,4))] #Sum_of_Squares
ERR<-Model.aov.1$univariate.tests[c(10,11,12)]
anovaVis <- c(SS,ERR)
SS_label <-c('Uncanny - Explained','Robot - Explained','Uncanny*Robot - Explained', #missing 'Residual - Unexplained'
'Uncanny_Error','Robot_Error','Uncanny*Robot_Error')
viz <-data.frame(
SS_viz = anovaVis,
Label = SS_label
)
piePlot <- plot_ly(viz, labels = ~Label, values =SS, type = 'pie') %>%
layout(title = 'Variance Explained/Unexplained',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
piePlot
piePlot <- plot_ly(viz, labels = ~Label, values =SS_viz, type = 'pie') %>%
layout(title = 'Variance Explained/Unexplained',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
length(SS_label)
length(anovaVis)
####### Design  #########
#Within
# 2 (Robot Type: Mechanical vs. Humanoid) x 3 (Uncanny Valley: low - medium - high)
###### Variables ######
## IV1:  Robot Type (Mechanical vs. Humanoid)
## IV2: Uncanny Valley (low - medium - high)
## DV: Avrg score of Empathy for Robot when it trips over something across 5 empathy questions (1 - 7); 1: low empathy and 7: high empathy
#######################
install.packages("truncnorm")
install.packages("ggplot2")
install.packages("plotly")
install.packages("plyr")
install.packages("lsmeans")
install.packages("afex")
install.packages("psych")
library(truncnorm) #limits the result between 1 and 7
library(ggplot2)
library (plotly)
library(plyr)
library(lsmeans)
library(afex)
library(psych)
N.1 = 5 #Sample size per cell
SD.c1 = 1 #standard deviation
SD.c2 = 1 #standard deviation
SD.c3 = 1 #standard deviation
SD.c4 = 1 #standard deviation
SD.c5 = 1 #standard deviation
SD.c6 = 1 #standard deviation
Mean.c1 = 3 #mechanical- low
Mean.c2 = 2 #mechanical -medium
Mean.c3 = 2 #mechanical -high
Mean.c4 = 6 #humanoid- low
Mean.c5 = 3 #humanoid -medium
Mean.c6 = 2 #humanoid -high
##Generating a dataset for Between design
roboData<- data.frame(
Subject = rep(seq(1,N.1),3),
Uncanny = c(rep("Low", N.1), rep("Medium", N.1), rep("High", N.1)),
Robot = c(rep("Mechanical",N.1*3), rep("Humanoid", N.1*3)),
Empathy =  c(rtruncnorm(N.1,1,7,1,.5), rtruncnorm(N.1,1,7,1,.5), #check the order so it corrsponds to the condition
rtruncnorm(N.1,1,7,1,.5), rtruncnorm(N.1,1,7,6,.5),
rtruncnorm(N.1,1,7,1,.5),rtruncnorm(N.1,1,7,1,.5)))
## Summary of the dataset
head(roboData, n=5)
str(roboData)
## Descriptives
describe(roboData)
#calculating the mean of each cell
tapply(roboData$Empathy,
list(roboData$Uncanny,roboData$Robot), mean)
#How each robot is performing
tapply(roboData$Empathy,
list(roboData$Robot), mean)
#Calculating ANOVA
Model.aov.1<-aov_car(Empathy ~ Uncanny*Robot + Error(Subject/Uncanny*Robot), data=roboData,
return = "univariate")
Model.aov.1
#Plotting the results
Plot.results <-ggplot(data = roboData, aes(x = Uncanny, y =Empathy, fill=Robot))+
#coord_cartesian(ylim = c(1,7))+ #specifying the y-axis scale
scale_y_continuous(breaks = seq(1,7,1))+
facet_grid(.~Robot)+
geom_bar(stat='identity', position=position_dodge(width=1))+
xlab("Platform Type")+ylab("Comprehension Score")+ #labelling the x-axis and y-axis
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank())+
scale_fill_brewer(palette="Dark2")
#scale_fill_grey()
Plot.results #displaying the graph
library(truncnorm) #limits the result between 1 and 7
library(ggplot2)
library (plotly)
library(plyr)
library(lsmeans)
library(afex)
library(psych)
N.1 = 5 #Sample size per cell
SD.c1 = 1 #standard deviation
SD.c2 = 1 #standard deviation
SD.c3 = 1 #standard deviation
SD.c4 = 1 #standard deviation
SD.c5 = 1 #standard deviation
SD.c6 = 1 #standard deviation
Mean.c1 = 3 #mechanical- low
Mean.c2 = 2 #mechanical -medium
Mean.c3 = 2 #mechanical -high
Mean.c4 = 6 #humanoid- low
Mean.c5 = 3 #humanoid -medium
Mean.c6 = 2 #humanoid -high
##Generating a dataset for Between design
roboData<- data.frame(
Subject = rep(seq(1,N.1),3),
Uncanny = c(rep("Low", N.1), rep("Medium", N.1), rep("High", N.1)),
Robot = c(rep("Mechanical",N.1*3), rep("Humanoid", N.1*3)),
Empathy =  c(rtruncnorm(N.1,1,7,1,.5), rtruncnorm(N.1,1,7,1,.5), #check the order so it corrsponds to the condition
rtruncnorm(N.1,1,7,1,.5), rtruncnorm(N.1,1,7,6,.5),
rtruncnorm(N.1,1,7,1,.5),rtruncnorm(N.1,1,7,1,.5)))
## Summary of the dataset
head(roboData, n=5)
str(roboData)
## Descriptives
describe(roboData)
#calculating the mean of each cell
tapply(roboData$Empathy,
list(roboData$Uncanny,roboData$Robot), mean)
#How each robot is performing
tapply(roboData$Empathy,
list(roboData$Robot), mean)
#Calculating ANOVA
Model.aov.1<-aov_car(Empathy ~ Uncanny*Robot + Error(Subject/Uncanny*Robot), data=roboData,
return = "univariate")
Model.aov.1
#Plotting the results
Plot.results <-ggplot(data = roboData, aes(x = Uncanny, y =Empathy, fill=Robot))+
#coord_cartesian(ylim = c(1,7))+ #specifying the y-axis scale
scale_y_continuous(breaks = seq(1,7,1))+
facet_grid(.~Robot)+
geom_bar(stat='identity', position=position_dodge(width=1))+
xlab("Platform Type")+ylab("Comprehension Score")+ #labelling the x-axis and y-axis
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank())+
scale_fill_brewer(palette="Dark2")
#scale_fill_grey()
Plot.results #displaying the graph
SS<-Model.aov.1$univariate.tests[c(seq(2,4))] #Sum_of_Squares
ERR<-Model.aov.1$univariate.tests[c(10,11,12)]
anovaVis <- c(SS,ERR)
SS_label <-c('Uncanny - Explained','Robot - Explained','Uncanny*Robot - Explained', #missing 'Residual - Unexplained'
'Uncanny_Error','Robot_Error','Uncanny*Robot_Error')
viz <-data.frame(
SS_viz = anovaVis,
Label = SS_label
)
viz
piePlot <- plot_ly(viz, labels = ~Label, values =SS_viz, type = 'pie') %>%
layout(title = 'Variance Explained/Unexplained',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
piePlot <- plot_ly(viz, labels = ~Label, values =viz$SS_viz, type = 'pie') %>%
layout(title = 'Variance Explained/Unexplained',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
piePlot
install.packages("rsconnect")
rsconnect::setAccountInfo(name='ihateanova',
token='A304B49991456A38962A4D8C85FA0159',
secret='+QMts0ERkWqv7Zn43Y72SrNANDh4r/Yq1r8NJkVA')
library(rsconnect)
rsconnect::deployApp('/Users/Mowafak/Dropbox/UIC/Spring 2017/R Class_Mowafak/Project/ANOVA_APP_documented.R')
library(rsconnect)
setwd('/Users/Mowafak/Documents/Tribune/weather_shootings/')
data <- read.csv('R_model.csv')
View(data)
data$X<-NULL
data$S_Date<-NULL
View(data)
data$ID<-NULL
?lm
lm(data$Number_of_Shootings ~ data$Temp)
x<-lm(data$Number_of_Shootings ~ data$Temp)
summary(x)
x<-lm(data$Number_of_Shootings ~ scale(data$Temp))
summary(x)
confint(x)
confint(x,level=.95)
x<-lm(data$Number_of_Shootings ~ data$Temp)
confint(x,level=.95)
